generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  nickname  String @unique
  password  String
  role      Role @default(USER)
  createdAt DateTime @default(now())
  
  groups    UserGroup[]
  guesses   Guess[] 
  createdGroups Group[]
}

enum Role {
  USER
  ADMIN
}

model Group {
  id        String @id @default(uuid())
  name      String
  isPublic  Boolean @default(true)
  createdBy String
  createdAt DateTime @default(now())

  @@unique([name, createdBy])

  creator   User   @relation(fields: [createdBy], references: [id])
  members UserGroup[]
}

model UserGroup {
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId]) // Define uma chave composta
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  shortName   String?
  logoUrl     String?
  createdAt   DateTime @default(now())

  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
}


model Match {
  id            String @id @default(uuid())
  homeTeamId    Int
  awayTeamId    Int
  scoreHome     Int?
  scoreAway     Int?
  date          DateTime?
  status        MatchStatus
  round         Int

  homeTeam Team @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeam Team @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)

  guesses   Guess[]
}

enum MatchStatus {
  PENDING
  ONGOING
  FINISHED
}

model Guess {
  userId    String
  matchId   String
  scoreHome Int
  scoreAway Int
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  match     Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@id([userId, matchId])
}

model RevokedToken {
  id         String   @id @default(uuid())
  token      String   @unique
  createdAt  DateTime @default(now())
}



